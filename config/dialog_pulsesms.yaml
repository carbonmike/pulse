#
# config file for Pulse SMS dialog engine
#

globals:
  system_id: pulse
  network_id: fsny
  service_module: pulse_sms_services
  command_handler_module: sms_handlers

service_objects:
  sms_twilio:
    class: SMSService
    init_params:
      - name: account_sid
        value: $TWILIO_ACCT_SID

      - name: auth_token
        value: $TWILIO_AUTH_TOKEN

      - name: source_mobile_number
        value: "9178102234"


command_sets:
  #        
  # Commands that direct the system to do something OR update the user's status
  #
  # (The command names are quoted because the YAML parser reads certain words (such as "on" and "off") incorrectly
  # as booleans.
  #
  system:
    settings:

    handlers:
      'on': handle_user_online
      'off': handle_user_offline
      'con': connect_user_stream
      'dis': disconnect_user_stream
      'mute': mute_messages
      'unmute': unmute_messages
      'pulse': send_pulse
      'snd': send_private_message
      'fwd': forward_private_message
      'arc': archive_message
      'det': message_details
      'reg': register_remote_pulse_server
      'hlp': display_help_prompts
      
    commands:
      'on':
        definition: 'Go on-line' # string describing what the command does
        arg_required: False # boolean; does the command require an argument?
        synonyms: []

      'off':
        definition: 'Go off-line'
        arg_required: False
        synonyms: []

      'con':
        definition: "Connect to a user's stream"
        arg_required: True
        synonyms: []

      'dis':
        definition: "Disconnect from a user's stream"
        arg_required: True
        synonyms: []

      'mute':
        definition: "Mute (but still retain) incoming messages"
        arg_required: False     
        synonyms: ['m']

      'unmute':
        definition: "Unmute incoming messages"
        arg_required: False
        synonyms: ['um']

      'pulse':
        definition: 'Send message to my outgoing stream'
        arg_required: True
        synonyms: ['p']

      'snd':
        definition: 'Send private message to user'
        arg_required: True
        synonyms: ['s']

      'fwd':
        definition: 'Forward private message to user'
        arg_required: True
        synonyms: ['f']
      
      'arc':
        definition: 'Archive message'
        arg_required: True 
        synonyms: []

      'det':
        definition: 'View message details'
        arg_required: True
        synonyms: ['dt']

      'reg':
        definition: 'Register remote Pulse server'
        arg_required: True
        synonyms: []

      'hlp':
        definition: 'Display help prompts'
        arg_required: False
        synonyms: ['?']

  # commands that emit a (full or partial) list of data items
  generator:
    settings:
      specifier: '.'
      filter_char: '?'

    handlers:

    commands:
      my:
        definition: 'List my messages' 
        
      msg:
        definition: 'Display messages from user'
        
      strm:
        definition: "Display messages from a user's stream"

      rmt:
        definition: "Display registered remote Pulse servers"

  #
  # The command symbol (its "tag") plus an alphanumeric designator, make up the prefix.
  # The prefix is separated from the (optional) command body by the defchar.
  # 
  # A function command has three basic modes:
  #   "tag" mode is invoked by specifying only the function's symbol.
  #   "call" mode is invoked by specifying the function's symbol plus an alphanumeric designator.
  #   "define" mode is invoked by specifying the symbol, an optional modifier, and a command body.
  #
  # Not every command-mode has to be associated with a behavior. The implementor may choose to only
  # assign a behavior to a single mode.
  #
  # A function command can also contain an optional string called an extension,
  # which appears immediately after the prefix and is separated from it by a "modifier"
  # or modchar. This allows implementors to alter the way a function works by registering
  # one or more additional handlers, each keyed to a specific modifier.
  #
  #
  function:
    settings:
      def_char: ':' # separator character between the prefix and the command body; signifies "define" form
      mod_char: '*' # separator char between the prefix and an optional modifier (and before the comand body)

    handlers: # handler functions for each of the three command modes
      '$':
        tag: handle_macro_tag
        call: handle_macro_call
        define: handle_macro_define
  
    commands:
      '$':
        definition: 'Create / call a user-defined macro'
        modifiers: ['r'] # read out a macro but do not execute it 

      '@':
        definition: 'Communicate with a user via his or her handle'
        modifiers: ['prv']

      '#':
        definition: 'Create (or look) up an abbreviation'
        modifiers: []

    
